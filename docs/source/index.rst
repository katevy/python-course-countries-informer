Информация по странам
=====================

Сервис для получения актуальной информации о странах и городах.

Зависимости
===========

1. Фреймворк
    Django>=4.0.7,<4.1.0

    djangorestframework>=3.14.0,<3.15.0

2. Генерация Swagger
    drf-yasg>=1.21.4,<1.22.0

3. Работа с переменными окружения
    django-environ>=0.9.0,<0.10.0

4. Отладчик для Django
    django-debug-toolbar>=3.6.0,<3.7.0

5. Адаптер для подключения к PostgreSQL
    psycopg2-binary>=2.9.3,<2.10.0

6. Документация
    Sphinx>=5.1.1,<5.2.0

    sphinx-rtd-theme>=1.0.0,<2.0.0

7. Статический анализ кода (линтеры)
    isort>=5.10.1,<5.11.0

    flake8-django>=1.1.5,<1.2.0

    pylint-django>=2.5.3,<2.6.0

    django-stubs[compatible-mypy]>=1.12.0,<1.13.0

8. Автоматическое форматирование кода
    black>=22.8.0,<22.9.0

9. Redis для кэширования
    redis>=4.3.4,<4.4.0

10. Распределенная очередь задач
    celery>=5.2.7,<5.3.0

    django-celery-beat>=2.3.0,<2.4.0

11. Работа с RabbitMQ
    pika>=1.3.1,<1.4.0

12. Работа с HTTP-запросами
    httpx>=0.23.0,<0.24.0

13. DTO и валидация данных
    pydantic>=1.10.2,<1.11.0

Установка
=========
1. Docker для контейнеризации – |link_docker|

.. |link_docker| raw:: html

   <a href="https://www.docker.com" target="_blank">Docker Desktop</a>

2. Для работы с системой контроля версий – |link_git|

.. |link_git| raw:: html

   <a href="https://github.com/git-guides/install-git" target="_blank">Git</a>

3. IDE для работы с исходным кодом – |link_pycharm|

.. |link_pycharm| raw:: html

    <a href="https://www.jetbrains.com/ru-ru/pycharm/download" target="_blank">PyCharm</a>

Клонируйте репозиторий проекта в свою рабочую директорию:

    .. code-block:: console

        git clone https://github.com/katevy/python-course-countries-informer.git


Использование
=============

Перед началом использования приложения необходимо его сконфигурировать.

.. note::

    Для конфигурации выполните команды, описанные ниже, находясь в корневой директории проекта (на уровне с директорией `src`).

1. Скопируйте файл настроек `.env.sample`, создав файл `.env`:
    .. code-block:: console

        cp .env.sample .env

    Этот файл содержит преднастроенные переменные окружения, значения которых будут общими для всего приложения.
    Файл примера (`.env.sample`) содержит набор переменных со значениями по умолчанию.
    Созданный файл `.env` можно настроить в зависимости от окружения.

    .. warning::

        Никогда не добавляйте в систему контроля версий заполненный файл `.env` для предотвращения компрометации информации о конфигурации приложения.

    Чтобы получить доступ к API внешних систем, посетите соответствующие сервисы и получите токены доступа:

    * APILayer — Geography API (https://apilayer.com/marketplace/geo-api)
    * OpenWeather – Weather Free Plan (https://openweathermap.org/price#weather)
    * NewsAPI - News API (https://newsapi.org/)


    Задайте полученные токены доступа в качестве значений переменных окружения (в файле `.env`):

    * `API_KEY_APILAYER` – для токена доступа к APILayer
    * `API_KEY_OPENWEATHER` – для токена доступа к OpenWeather
    * `API_KEY_NEWSAPI` - токен для доступа к NewsAPI

2. Соберите Docker-контейнер с помощью Docker Compose:
    .. code-block:: console

        docker compose build

    Данную команду необходимо выполнять повторно в случае обновления зависимостей в файле `requirements.txt`.

3. Чтобы просмотреть документацию по использованию консольного приложения, выполните:
    .. code-block:: console

        docker compose run app python main.py --help

    Данная команда выведет на экран список доступных аргументов и их значения по умолчанию.

4. Для запуска приложения выполните:
    .. code-block:: console

        docker compose up

    Когда все контейнеры будут запущены, сервер будет работать по адресу `http://0.0.0.0:8020`.

5. Для корректной работы приложения настройте базу данных с помощью команд.
    Подключитесь к Docker-контейнеру приложения:
    .. code-block:: console
        docker compose exec countries-informer-app bash
    Примените миграции с помощью команды:
    .. code-block:: console
        ./manage.py migrate


Работа с базой данных
---------------------

При необходимости обновления структуры таблиц в базе данных нужно обновить соответствущие модели (`models.py`)
и выполнить команду для генерации миграций, которые затем следует применить.

Команды выполняются внутри контейнера приложения:

    .. code-block:: console
        docker compose exec countries-informer-app bash
Для генерации миграций:

    .. code-block:: console
        ./manage.py makemigrations
Для применения новых миграций:

    .. code-block:: console
        ./manage.py migrate
    Данная команда обновит структуру таблиц в базе данных в соответствии с моделями.


Автоматизация
=============

Проект содержит специальный файл (`Makefile`) для автоматизации выполнения команд:

1. Сборка Docker-контейнера.
2. Генерация документации.
3. Запуск форматирования кода.
4. Запуск статического анализа кода (выявление ошибок типов и форматирования кода).
5. Запуск автоматических тестов.
6. Запуск всех функций поддержки качества кода (форматирование, линтеры, автотесты).

Инструкция по запуску этих команд находится в файле `README.md`.



